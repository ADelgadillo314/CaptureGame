{"version":3,"sources":["players/players.js","GameLogic/GameLogic.js","Ai/capture_AI.js","components/ScoreBoard.js","GameMode/GameMode.js","actions/actions.js","actions/actionTypes.js","components/Squares/BlankSquare.js","components/Squares/PlayerOneOccupiedSquare.js","components/Squares/PlayerTwoOccupiedSquare.js","components/Squares/WallSquare.js","components/Board.js","components/ButtonBar.js","components/Game.js","reducers/captureReducer.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","playerOne","playerTwo","wall","r","Minimax","FirstTurnBestMove","movePlayer","setPlayer","isLegalMove","hasPlayerWithTurnWonByKill","hasPlayerWithTurnLostByNoMoves","_players_players__WEBPACK_IMPORTED_MODULE_0__","captureAI","require","firstTierMoves","row","col","topTierMoves","board","previousBoard","player","ExtendedMinimax","state","turn","move","Math","floor","random","length","playerOnePosition","goodSecondPlayerMove","currentRow","currentCol","newRow","newCol","searchForArray","getAvailableMoves","playerWithTurn","playerTwoPosition","playerOneMoves","playerTwoMoves","playerPosition","makePosition","c","haystack","needle","i","player_row","player_col","movelist","incr","square","push","moves","setSquare","val","getBoardWithMovedPlayer","currentPosition","b","JSON","parse","stringify","copyBoard","findPlayerPos","position","j","hasPlayerWonByCapturing","prevBoard","enemy","playerPos","enemyPosInPrevBoard","isPlayerInWinningState","minimax","prevboard","depth","player1Pos","player2Pos","playerMoves","aiPos","humanPos","movedBoard","score","bestMove","bestScore","ConvertBoard","console","log","aiFormattedBoard","border","module","exports","brd","previousBrd","showPaths","s","possibleMoves","printBoard","ScoreBoard","this","props","gameMode","react_default","a","createElement","className","playerOneScore","playerTwoScore","onClick","isDisabled","undefined","switchGameMode","xmlns","viewBox","fill","Component","connect","_ref","dispatch","type","Square","styled","div","_templateObject","BlankSquare","disabled","PlayerOneOccupiedSquare","x1","y1","x2","y2","stroke","strokeWidth","PlayerTwoOccupiedSquare","cx","cy","WallSquare","x","y","width","height","opacity","Board","_this","setTimeout","autoSelectMove","status","Squares_PlayerOneOccupiedSquare","key","Squares_PlayerTwoOccupiedSquare","Squares_WallSquare","Squares_BlankSquare","bind","_this2","align","Object","keys","map","getSquareStatus","movePlayerAction","ButtonBar","won","startAgain","previousState","undoLastMove","Game","components_ScoreBoard","components_Board","components_ButtonBar","gameLogic","initialState","0","1","2","3","4","5","store","createStore","captureReducer","action","newState","_","parseInt","previous","resetState","newGameState","es","components_Game","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6212410.chunk.js","sourcesContent":["export const playerOne = 2;\r\nexport const playerTwo = 3;\r\nexport const wall = 1;","import { wall, playerOne } from '../players/players';\r\nconst captureAI = require('../Ai/capture_AI');\r\n\r\nlet firstTierMoves = [{ row: 2, col: 2 }, { row: 2, col: 3 },\r\n{ row: 3, col: 3 }, { row: 3, col: 2 }];\r\n\r\nlet topTierMoves = [{ row: 2, col: 2 }, { row: 2, col: 3 }, { row: 3, col: 3 }, { row: 3, col: 2 },\r\n                    { row: 1, col: 1 }, { row: 1, col: 2 }, { row: 1, col: 3 }, { row: 1, col: 4 },\r\n                    { row: 2, col: 1 }, { row: 2, col: 4 }, { row: 3, col: 1 }, { row: 3, col: 4 },\r\n                    { row: 3, col: 1 }, { row: 3, col: 2 }, { row: 3, col: 3 }, { row: 3, col: 4 }]\r\n\r\nexport const Minimax = (board, previousBoard, player) => captureAI.ExtendedMinimax(board, previousBoard, player);\r\n\r\nexport const FirstTurnBestMove = (state) => {\r\n    if (state.turn === playerOne) {\r\n        let move = firstTierMoves[Math.floor(Math.random() * firstTierMoves.length)];\r\n        \r\n        return {row: move.row, col: move.col};\r\n    }\r\n    else {\r\n        while (true) {\r\n            let move = topTierMoves[Math.floor(Math.random() * topTierMoves.length)];\r\n            if(move.row === state.playerOnePosition.row && move.col === state.playerOnePosition.col)\r\n            {\r\n                continue;\r\n            }\r\n            else if(goodSecondPlayerMove(state.board, move, state.playerOnePosition))\r\n            {\r\n                continue;\r\n            }\r\n            else{\r\n                return {row: move.row, col: move.col};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const movePlayer = (board, player, currentRow, currentCol, newRow, newCol) => {\r\n    board[currentRow][currentCol] = wall;\r\n    board[newRow][newCol] = player;\r\n}\r\n\r\nexport const setPlayer = (board, player, newRow, newCol) => {\r\n    board[newRow][newCol] = player;\r\n}\r\n\r\nexport const isLegalMove = function (board, player, move) {\r\n    if (player.row === 0 || player.col === 0) {\r\n        return true;\r\n    }\r\n    var moves = getAvailableMoves(board, player.row, player.col);\r\n    return searchForArray(moves, move)\r\n}\r\n\r\nexport const hasPlayerWithTurnWonByKill = function (board, playerWithTurn, playerOnePosition, playerTwoPosition) {\r\n    let playerOneMoves = getAvailableMoves(board, playerOnePosition.row, playerOnePosition.col);\r\n    let playerTwoMoves = getAvailableMoves(board, playerTwoPosition.row, playerTwoPosition.col);\r\n    return playerWithTurn === playerOne ? searchForArray(playerOneMoves, playerTwoPosition) : searchForArray(playerTwoMoves, playerOnePosition);\r\n}\r\n\r\nexport const hasPlayerWithTurnLostByNoMoves = function (board, playerPosition) {\r\n    return getAvailableMoves(board, playerPosition.row, playerPosition.col).length === 0;\r\n}\r\n\r\nlet makePosition = function (r, c) {\r\n    return { row: r, col: c };\r\n}\r\n\r\nfunction searchForArray(haystack, needle) {\r\n    let i;\r\n    for (i = 0; i < haystack.length; ++i) {\r\n        if (haystack[i].row == needle.row && haystack[i].col == needle.col) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nlet getAvailableMoves = function (board, player_row, player_col) {\r\n    let movelist = [];\r\n    let min = 0;\r\n    let max = 6;\r\n    //up\r\n    let incr = player_row - 1;\r\n    while (incr >= min) {\r\n        let square = board[incr][player_col];\r\n        if (square !== 0) {\r\n            // if square is the enemy\r\n            if (square !== 1) {\r\n                movelist.push(makePosition(incr, player_col));\r\n            }\r\n            break;\r\n        }\r\n        else {\r\n            movelist.push(makePosition(incr, player_col));\r\n            incr--;\r\n        }\r\n    }\r\n\r\n    //down \r\n    incr = player_row + 1;\r\n    while (incr < max) {\r\n        let square = board[incr][player_col];\r\n        if (square !== 0) {\r\n            // if square is the enemy\r\n            if (square !== 1) {\r\n                movelist.push(makePosition(incr, player_col));\r\n            }\r\n            break;\r\n        }\r\n        else {\r\n            movelist.push(makePosition(incr, player_col));\r\n            incr++;\r\n        }\r\n\r\n    }\r\n\r\n    //left\r\n    incr = player_col - 1;\r\n    while (incr >= min) {\r\n        let square = board[player_row][incr];\r\n        if (square !== 0) {\r\n            // if square is the enemy\r\n            if (square !== 1) {\r\n                movelist.push(makePosition(player_row, incr));\r\n            }\r\n            break;\r\n        }\r\n        else {\r\n            movelist.push(makePosition(player_row, incr));\r\n            incr--;\r\n        }\r\n\r\n    }\r\n\r\n    //right\r\n    incr = player_col + 1;\r\n    while (incr < max) {\r\n        let square = board[player_row][incr];\r\n        if (square !== 0) {\r\n            // if square is the enemy\r\n            if (square !== 1) {\r\n                movelist.push(makePosition(player_row, incr));\r\n            }\r\n            break;\r\n        }\r\n        else {\r\n            movelist.push(makePosition(player_row, incr));\r\n            incr++;\r\n        }\r\n    }\r\n\r\n    //southwest\r\n    incr = 1;\r\n    while (player_row + incr < max && player_col - incr >= min) {\r\n        let square = board[player_row + incr][player_col - incr];\r\n        if (square !== 0) {\r\n            // if square is the enemy\r\n            if (square !== 1) {\r\n                movelist.push(makePosition(player_row + incr, player_col - incr));\r\n            }\r\n            break;\r\n        }\r\n        else {\r\n            movelist.push(makePosition(player_row + incr, player_col - incr));\r\n            incr++;\r\n        }\r\n\r\n    }\r\n\r\n    //southeast\r\n    incr = 1;\r\n\r\n    while (player_row + incr < max && player_col + incr < max) {\r\n        let square = board[player_row + incr][player_col + incr];\r\n        if (square !== 0) {\r\n            // if square is the enemy\r\n            if (square !== 1) {\r\n                movelist.push(makePosition(player_row + incr, player_col + incr));\r\n            }\r\n            break;\r\n        }\r\n        else {\r\n            movelist.push(makePosition(player_row + incr, player_col + incr));\r\n            incr++;\r\n        }\r\n\r\n    }\r\n\r\n    //northwest\r\n    incr = 1;\r\n\r\n    while (player_row - incr >= min && player_col - incr >= min) {\r\n        let square = board[player_row - incr][player_col - incr];\r\n\r\n        if (square !== 0) {\r\n            // if square is the enemy\r\n            if (square !== 1) {\r\n                movelist.push(makePosition(player_row - incr, player_col - incr));\r\n            }\r\n            break;\r\n        }\r\n        else {\r\n            movelist.push(makePosition(player_row - incr, player_col - incr));\r\n            incr++;\r\n        }\r\n    }\r\n\r\n    //northeast\r\n    incr = 1;\r\n    while (player_row - incr >= min && player_col + incr < max) {\r\n        let square = board[player_row - incr][player_col + incr];\r\n        if (square !== 0) {\r\n            // if square is the enemy\r\n            if (square !== 1) {\r\n                movelist.push(makePosition(player_row - incr, player_col + incr));\r\n            }\r\n            break;\r\n        }\r\n        else {\r\n            movelist.push(makePosition(player_row - incr, player_col + incr));\r\n            incr++;\r\n        }\r\n    }\r\n\r\n    return movelist;\r\n}\r\n\r\nlet goodSecondPlayerMove = function (board, move, playerOnePosition)\r\n{\r\n    let moves = getAvailableMoves(board, move.row, move.col);\r\n    moves.push(move);\r\n    return searchForArray(moves, playerOnePosition);\r\n}\r\n","const wall = 1;\r\nconst human_player = 2;\r\nconst ai_player = 3;\r\nconst RecursiveDepth = 2;\r\n\r\n\r\n// Utility Functions\r\n\r\nlet printBoard = function (board) {\r\n    console.log(\"------------------------------\");\r\n    console.log(\"\");\r\n    for (let i = 1; i < board.length - 1; i++) {\r\n        var row = \"\";\r\n        for (let j = 1; j < board[i].length - 1; j++) {\r\n            row += board[i][j] + \" \";\r\n\r\n        }\r\n        console.log(row);\r\n    }\r\n    console.log(\"\");\r\n    console.log(\"------------------------------\");\r\n}\r\n\r\nlet setSquare = function (board, row, col, val) {\r\n    board[row][col] = val;\r\n}\r\n\r\nlet movePlayer = function (board, row, col, player, player_row, player_col) {\r\n    setSquare(board, row, col, player);\r\n    setSquare(board, player_row, player_col, wall);\r\n}\r\n\r\nlet makePosition = function (r, c) {\r\n    return { row: r, col: c };\r\n}\r\n\r\nlet copyBoard = function (board) {\r\n    return JSON.parse(JSON.stringify(board));\r\n}\r\n\r\nlet getBoardWithMovedPlayer = function (board, move, currentPosition, player) {\r\n    var b = copyBoard(board);\r\n    movePlayer(b, move.row, move.col, player, currentPosition.row, currentPosition.col);\r\n    return b;\r\n}\r\n\r\nlet findPlayerPos = function (board, player) {\r\n    var position = {};\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board[i].length; j++) {\r\n            if (board[i][j] === player) {\r\n                position.row = i;\r\n                position.col = j;\r\n                return position;\r\n            }\r\n        }\r\n    }\r\n    return position;\r\n}\r\n\r\nfunction searchForArray(haystack, needle) {\r\n    let i;\r\n    for (i = 0; i < haystack.length; ++i) {\r\n        if (haystack[i].row === needle.row && haystack[i].col === needle.col) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n// Helper Functions\r\n\r\nlet getAvailableMoves = function (board, player_row, player_col) {\r\n    let movelist = [];\r\n\r\n    //up\r\n    let incr = player_row - 1;\r\n    while (board[incr][player_col] !== 1) {\r\n        movelist.push(makePosition(incr, player_col));\r\n        if (board[incr][player_col] !== 0) {\r\n            break;\r\n        }\r\n        incr--;\r\n    }\r\n\r\n    //down \r\n    incr = player_row + 1;\r\n    while (board[incr][player_col] !== 1) {\r\n        movelist.push(makePosition(incr, player_col));\r\n        if (board[incr][player_col] !== 0) {\r\n            break;\r\n        }\r\n        incr++;\r\n    }\r\n\r\n    //left\r\n    incr = player_col - 1;\r\n    while (board[player_row][incr] !== 1) {\r\n        movelist.push(makePosition(player_row, incr));\r\n        if (board[player_row][incr] !== 0) {\r\n            break;\r\n        }\r\n        incr--;\r\n    }\r\n\r\n    //right\r\n    incr = player_col + 1;\r\n    while (board[player_row][incr] !== 1) {\r\n        movelist.push(makePosition(player_row, incr));\r\n        if (board[player_row][incr] !== 0) {\r\n            break;\r\n        }\r\n        incr++;\r\n    }\r\n\r\n    //southwest\r\n    incr = 1;\r\n    while (board[player_row + incr][player_col - incr] !== 1) {\r\n        movelist.push(makePosition(player_row + incr, player_col - incr));\r\n        if (board[player_row + incr][player_col - incr] !== 0) {\r\n            break;\r\n        }\r\n        incr++;\r\n\r\n    }\r\n\r\n    //southeast\r\n    incr = 1;\r\n    while (board[player_row + incr][player_col + incr] !== 1) {\r\n        movelist.push(makePosition(player_row + incr, player_col + incr));\r\n        if (board[player_row + incr][player_col + incr] !== 0) {\r\n            break;\r\n        }\r\n        incr++;\r\n\r\n    }\r\n\r\n    //northwest\r\n    incr = 1;\r\n    while (board[player_row - incr][player_col - incr] !== 1) {\r\n        movelist.push(makePosition(player_row - incr, player_col - incr));\r\n        if (board[player_row - incr][player_col - incr] !== 0) {\r\n            break;\r\n        }\r\n        incr++;\r\n\r\n    }\r\n\r\n    //northeast\r\n    incr = 1;\r\n    while (board[player_row - incr][player_col + incr] !== 1) {\r\n        movelist.push(makePosition(player_row - incr, player_col + incr));\r\n        if (board[player_row - incr][player_col + incr] !== 0) {\r\n            break;\r\n        }\r\n        incr++;\r\n    }\r\n\r\n    return movelist;\r\n}\r\n\r\n//shows paths on grid of a player. \r\nlet showPaths = function (board, player) {\r\n    let s = JSON.parse(JSON.stringify(board));\r\n\r\n    let possibleMoves = getAvailableMoves(s, player.row, player.col);\r\n    for (let i = 0; i < possibleMoves.length; i++) {\r\n        let r = possibleMoves[i].row;\r\n        let c = possibleMoves[i].col;\r\n\r\n        s[r][c] = '-';\r\n    }\r\n\r\n    printBoard(s);\r\n}\r\n\r\nfunction scoreGameState(state, player1Pos, player2Pos) {\r\n    let numPlayer1Moves = getAvailableMoves(state, player1Pos.row, player1Pos.col).length;\r\n    let numPlayer2Moves = getAvailableMoves(state, player2Pos.row, player2Pos.col).length;\r\n\r\n    return numPlayer1Moves - numPlayer2Moves;\r\n\r\n}\r\n\r\nlet hasPlayerWonByCapturing = function (board, prevBoard, player) {\r\n    let enemy = player === ai_player ? human_player : ai_player;\r\n\r\n    let playerPos = findPlayerPos(board, player);\r\n\r\n    let enemyPosInPrevBoard = findPlayerPos(prevBoard, enemy);\r\n\r\n    if (playerPos.row === enemyPosInPrevBoard.row && playerPos.col === enemyPosInPrevBoard.col) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n// is the player in a position to be captured. i.e in line with opponent. \r\nlet isPlayerInWinningState = function (board, player) {\r\n    let playerPos = findPlayerPos(board, player);\r\n    let playerMoves = getAvailableMoves(board, playerPos.row, playerPos.col);\r\n\r\n    let enemy = player === ai_player ? human_player : ai_player;\r\n\r\n    let enemyPos = findPlayerPos(board, enemy);\r\n\r\n    return searchForArray(playerMoves, enemyPos);\r\n}\r\n\r\n\r\nlet minimax = function (board, prevboard, player, depth) {\r\n    if (hasPlayerWonByCapturing(board, prevboard, human_player)) {\r\n        return -1000;\r\n    }\r\n    else if (hasPlayerWonByCapturing(board, prevboard, ai_player)) {\r\n        return 1000;\r\n    }\r\n\r\n    var playerPos = findPlayerPos(board, player);\r\n    var playerMoves = getAvailableMoves(board, playerPos.row, playerPos.col);\r\n\r\n    if (playerMoves.length === 0) {\r\n        return player === ai_player ? -1000 : 1000;\r\n    }\r\n\r\n    if (depth === 0) {\r\n        if (isPlayerInWinningState(board, player) && player === ai_player) {\r\n            return 1000;\r\n        }\r\n        else if (isPlayerInWinningState(board, player) && player === human_player) {\r\n            return -1000;\r\n        }\r\n\r\n        var aiPos = findPlayerPos(board, ai_player);\r\n        var humanPos = findPlayerPos(board, human_player);\r\n        return scoreGameState(board, aiPos, humanPos);\r\n    }\r\n\r\n    //score the moves. \r\n    for (let i = 0; i < playerMoves.length; i++) {\r\n        let move = playerMoves[i];\r\n        if (player === ai_player) {\r\n            let movedBoard = getBoardWithMovedPlayer(board, move, playerPos, ai_player);\r\n            move.score = minimax(movedBoard, board, human_player, depth - 1);\r\n        }\r\n        else {\r\n            let movedBoard = getBoardWithMovedPlayer(board, move, playerPos, human_player);\r\n            move.score = minimax(movedBoard, board, ai_player, depth - 1);\r\n        }\r\n\r\n    }\r\n\r\n    let bestMove = {};\r\n    // return the best move; \r\n    if (player === ai_player) {\r\n        let bestScore = -10000;\r\n        for (let i = 0; i < playerMoves.length; i++) {\r\n            let move = playerMoves[i];\r\n            if (move.score > bestScore) {\r\n                bestScore = move.score;\r\n                bestMove = move;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        let bestScore = 10000;\r\n        for (let i = 0; i < playerMoves.length; i++) {\r\n            let move = playerMoves[i];\r\n            if (move.score < bestScore) {\r\n                bestScore = move.score;\r\n                bestMove = move;\r\n            }\r\n        }\r\n    }\r\n    return depth === RecursiveDepth ? bestMove : bestMove.score;\r\n}\r\n\r\nlet ExtendedMiniMax = function (brd, previousBrd, player) {\r\n    let board = ConvertBoard(brd);\r\n    let previousBoard = ConvertBoard(previousBrd);\r\n    var move = minimax(board, previousBoard, player, RecursiveDepth);\r\n    return {row: move.row -1 , col: move.col - 1};\r\n}\r\n\r\nlet ConvertBoard = function (board) {\r\n    console.log(board)\r\n    let min = 0;\r\n    let max = 6;\r\n    let aiFormattedBoard = [];\r\n    let border = [1, 1, 1, 1, 1, 1, 1, 1];\r\n    aiFormattedBoard.push(border);\r\n\r\n    for (let i = min; i < max; i++) {\r\n        let newRow = [1];\r\n        let row = board[i];\r\n        for(let j = 0; j < 6; j++)\r\n        {\r\n            newRow.push(row[j]);\r\n        }\r\n        newRow.push(1);\r\n        aiFormattedBoard.push(newRow);\r\n    }\r\n    aiFormattedBoard.push(border);\r\n\r\n    return aiFormattedBoard;\r\n}\r\n\r\nmodule.exports = {\r\n    ExtendedMinimax: ExtendedMiniMax,\r\n    showPaths: showPaths\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { switchGameMode } from '../actions/actions';\r\nimport {SINGLE_PLAYER} from  '../GameMode/GameMode';\r\nimport { playerTwo } from '../players/players';\r\n\r\nclass ScoreBoard extends Component{\r\n\r\n    isDisabled()\r\n    {\r\n        return this.props.gameMode === SINGLE_PLAYER && this.props.turn === playerTwo;\r\n    }\r\n\r\n    render()\r\n    {\r\n        return <div className=\"scores\">\r\n\r\n        <div className=\"player\">\r\n            Player One (X)\r\n            <span className=\"score\">\r\n                {this.props.playerOneScore}\r\n            </span>\r\n        </div>\r\n        \r\n        <div className=\"player\">\r\n            {this.props.gameMode !== SINGLE_PLAYER ? \"Player Two (O)\" : \"Computer (O)\"} \r\n            <span className=\"score\">\r\n                {this.props.playerTwoScore}\r\n            </span>\r\n        </div>\r\n\r\n        <div className=\"gameMode\" onClick={!this.isDisabled() ? this.props.switchGameMode: undefined} >\r\n            {\r\n                this.props.gameMode === SINGLE_PLAYER ?\r\n                <div className=\"mode\" >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\r\n                        <g fill=\"#000\">\r\n                            <path d=\"M49.947,90.991c0.693,0,1.41,0.02,2.104,0c13.547-0.201,26.439-1.723,28.775-3.945 \r\n                            c0.537-4.928,1.195-7.311-20.65-17.644c-3.107-1.742-1.465-8.492-1.465-8.492c6.578-4.969,11.096-16.463,\r\n                            11.096-25.676 c0-15.921-7.18-23.453-17.756-24.234h-2.104c-10.557,0.781-17.734,8.312-17.734,24.234c0,\r\n                            9.213,4.496,20.707,11.078,25.676 c0,0,1.641,6.75-1.449,8.492C19.979,79.735,20.635,82.118,21.176,\r\n                            87.046C23.51,89.269,36.402,90.79,49.947,90.991z\"></path>\r\n                        </g>\r\n                    </svg>\r\n                    <span className=\"modeTitle\">P1</span>\r\n                </div>\r\n                :\r\n                <div className=\"mode\" >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\r\n                        <g fill=\"#000\">\r\n                            <path  d=\"M66.219,85h1.562c9.92-0.14,19.38-1.2,21.08-2.779c0.422-3.44,0.9-5.101-15.142-12.341\r\n                            c-2.279-1.22-1.059-5.939-1.059-5.939c4.822-3.48,8.123-11.521,8.123-17.98c0-11.14-5.263-16.419-13.001-16.959h-1.562\r\n                            c-7.738,0.54-13,5.799-13,16.959c0,6.46,3.301,14.5,8.121,17.98c0,0,1.221,4.719-1.059,5.939c-16.041,7.24-15.562,\r\n                            8.9-15.14,12.341 C46.84,83.8,56.301,84.86,66.219,85z M30.217,69h1.564c9.918-0.14,19.378-1.2,21.078-2.779c0.422-3.44,\r\n                            0.9-5.1-15.14-12.34 c-2.279-1.22-1.059-5.939-1.059-5.939c4.82-3.48,8.121-11.521,8.121-17.98c0-11.14-5.262-16.42-13-16.96h-1.564\r\n                            c-7.738,0.54-13,5.8-13,16.96c0,6.459,3.301,14.5,8.121,17.98c0,0,1.221,4.72-1.059,5.939c-16.041,7.24-15.562,8.9-15.14,12.34\r\n                                C10.839,67.8,20.299,68.86,30.217,69z\"></path>\r\n                        </g>\r\n                    </svg>\r\n                        <span className=\"modeTitle\">P2</span>\r\n                </div>                        \r\n            }\r\n        </div>\r\n    </div>\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    // Import props into this component from the store\r\n    ({  playerOneScore, playerTwoScore, gameMode }) => ({\r\n         playerOneScore, playerTwoScore, gameMode\r\n    }),\r\n\r\n    // Import Actions into Component\r\n    (dispatch) => {\r\n        return {\r\n            switchGameMode() {\r\n                dispatch(switchGameMode())\r\n            }\r\n        };\r\n    }\r\n)(ScoreBoard);","export const SINGLE_PLAYER = \"SINGLE_PLAYER\";\r\nexport const TWO_PLAYER = \"TWO_PLAYER\";","import { MOVE_PLAYER, START_NEW_GAME, UNDO_LAST_MOVE, AUTO_SELECT_MOVE, SWITCH_GAME_MODE } from './actionTypes';\r\n\r\nexport const movePlayerAction = (row, col, player) => ({\r\n    type: MOVE_PLAYER,\r\n    player: player,\r\n    row: row,\r\n    col: col\r\n});\r\n\r\nexport const startNewGameAction = () => ({\r\n    type: START_NEW_GAME\r\n})\r\n\r\nexport const undoLastMove = () => ({\r\n    type: UNDO_LAST_MOVE\r\n})\r\n\r\nexport const autoSelectMove = () => ({\r\n    type: AUTO_SELECT_MOVE\r\n})\r\n\r\nexport const switchGameMode = () => ({\r\n    type: SWITCH_GAME_MODE\r\n})","export const MOVE_PLAYER = 'MOVE_PLAYER';\r\nexport const START_NEW_GAME = 'START_NEW_GAME';\r\nexport const UNDO_LAST_MOVE = 'UNDO_LAST_MOVE';\r\nexport const AUTO_SELECT_MOVE = 'AUTO_SELECT_MOVE';\r\nexport const SWITCH_GAME_MODE = 'SWITCH_GAME_MODE';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nexport const Square = styled.div`\r\n  background-color: white;\r\n  border: 1px solid black;\r\n  height: 60px;\r\n  margin: 1px;\r\n  transition: background-color .5s ease;\r\n  width: 60px;\r\n`;\r\n\r\nconst BlankSquare = (props) => {\r\n  return <Square onClick={() => !props.disabled ? props.movePlayer(props.turn): undefined}\r\n  ></Square>;\r\n};\r\n\r\nBlankSquare.propTypes = {\r\n  movePlayer: PropTypes.func.isRequired,\r\n  turn: PropTypes.number.isRequired,\r\n  disabled: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default BlankSquare;","import React from 'react';\r\nimport  {Square}  from './BlankSquare.js';\r\n\r\nconst PlayerOneOccupiedSquare = (props) => {\r\n  return (\r\n    <Square className={`square `}>\r\n      <svg viewBox=\"0 0 56 56\">\r\n      <line x1=\"12\" y1=\"10\" x2=\"46\" y2=\"46\" stroke=\"#b37c57\" strokeWidth=\"5\" />\r\n        <line x1=\"12\" y1=\"46\" x2=\"46\" y2=\"10\" stroke=\"#b37c57\" strokeWidth=\"5\" />\r\n      </svg>\r\n    </Square>\r\n  );\r\n};\r\n\r\nexport default PlayerOneOccupiedSquare;\r\n","import React from 'react';\r\nimport {Square} from './BlankSquare';\r\n\r\nconst PlayerTwoOccupiedSquare = (props) => {\r\n  return (\r\n    <Square className={`square `}>\r\n      <svg viewBox=\"0 0 56 56\">\r\n        <circle cx={28} cy={28} r={20} stroke=\"black\" strokeWidth=\"2\" fill=\"#9aacb8\" />\r\n      </svg>\r\n    </Square>\r\n  );\r\n};\r\n\r\nexport default PlayerTwoOccupiedSquare;\r\n","import React from 'react';\r\nimport { Square } from './BlankSquare';\r\n\r\nconst WallSquare = (props) => {\r\n  return (\r\n    <Square className={`square`}>\r\n      <svg viewBox=\"0 0 56 56\">\r\n        <rect x=\"6\" y =\"6\" width=\"45\" height=\"45\" fill=\"#60412B\" opacity=\"0.5\" stroke=\"rgb(0,0,0)\" strokeWidth=\"2\" />\r\n      </svg>\r\n    </Square>\r\n  );\r\n};\r\nexport default WallSquare;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { movePlayerAction, autoSelectMove } from '../actions/actions';\r\nimport BlankSquare from './Squares/BlankSquare';\r\nimport PlayerOneOccupiedSquare from './Squares/PlayerOneOccupiedSquare';\r\nimport PlayerTwoOccupiedSquare from './Squares/PlayerTwoOccupiedSquare';\r\nimport WallSquare from './Squares/WallSquare';\r\nimport {SINGLE_PLAYER} from  '../GameMode/GameMode';\r\nimport { playerOne, playerTwo, wall } from '../players/players';\r\n\r\nclass Board extends Component {\r\n\r\n    componentDidUpdate(){\r\n        if(this.isDisabled())\r\n        {\r\n            setTimeout(() => {     \r\n                this.props.autoSelectMove();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    getSquareStatus(row, col, status) {\r\n        switch (status) {\r\n            case playerOne:\r\n                return <PlayerOneOccupiedSquare key={col} />;\r\n            case playerTwo:\r\n                return <PlayerTwoOccupiedSquare key={col} />;\r\n            case wall:\r\n                return <WallSquare key={col} />;\r\n            default:\r\n                return <BlankSquare key={col}\r\n                    movePlayer={this.props.movePlayer.bind(this, row, col)}\r\n                    turn={this.props.turn}\r\n                    disabled={this.isDisabled()} />\r\n\r\n        }\r\n    }\r\n\r\n    isDisabled()\r\n    {\r\n        return this.props.gameMode === SINGLE_PLAYER && this.props.turn === playerTwo;\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"captureGame\" align=\"center\">\r\n            <div className=\"game\">\r\n                <div className=\"board\" >\r\n                    {\r\n                        Object.keys(this.props.board)\r\n                            .map(row => {\r\n                                return (\r\n                                    <div className={`row`} key={row} >\r\n                                        {\r\n\r\n                                            this.props.board[row].map((player, col) => {\r\n                                                return this.getSquareStatus(row, col, player);\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                );\r\n                            })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nBoard.propTypes = {\r\n    // PROPS FROM STORE\r\n    board: PropTypes.object.isRequired,\r\n    turn: PropTypes.number.isRequired,\r\n    won: PropTypes.number,\r\n    previousState: PropTypes.object,\r\n\r\n    // ACTIONS FOR DISPATCH\r\n    movePlayer: PropTypes.func.isRequired,\r\n    autoSelectMove: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n    // Import props into this component from the store\r\n    ({ board, turn, gameMode }) => ({\r\n        board, turn, gameMode\r\n    }),\r\n\r\n    // Import Actions into Component\r\n    (dispatch) => {\r\n        return {\r\n            movePlayer(row, col, player) {\r\n                dispatch(movePlayerAction(row, col, player));\r\n            },\r\n            autoSelectMove() {\r\n                dispatch(autoSelectMove())\r\n            }\r\n        };\r\n    }\r\n)(Board);\r\n\r\nexport { Board as PureBoard };","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { startNewGameAction, undoLastMove, autoSelectMove } from '../actions/actions';\r\nimport {SINGLE_PLAYER} from  '../GameMode/GameMode';\r\nimport { playerTwo } from '../players/players';\r\n\r\nclass ButtonBar extends Component \r\n{\r\n    isDisabled()\r\n    {\r\n        return this.props.gameMode === SINGLE_PLAYER && this.props.turn === playerTwo;\r\n    }\r\n\r\n    render() {\r\n        return  <div className=\"buttonBar\">\r\n                {\r\n                    !this.props.won ?\r\n                        <button onClick={this.props.autoSelectMove} \r\n                        disabled={this.isDisabled()}>\r\n                            Auto Select Move\r\n                        </button> : false\r\n\r\n                }\r\n                {\r\n                    this.props.won ?\r\n                        <button onClick={this.props.startAgain}>\r\n                            Click to start again!\r\n                        </button> :\r\n                        <button onClick={this.props.startAgain} \r\n                            disabled={this.isDisabled()}>\r\n                            Restart Game\r\n                        </button>\r\n\r\n                }\r\n                {\r\n                    this.props.previousState ?\r\n                        <button className=\"startAgain\" onClick={this.props.undoLastMove} \r\n                                disabled={this.isDisabled()} >\r\n                            Undo Last Move\r\n                        </button> : false\r\n                }\r\n            </div>\r\n    }\r\n\r\n}\r\n\r\nButtonBar.propTypes = {\r\n    // PROPS FROM STORE\r\n    won: PropTypes.number,\r\n    previousState: PropTypes.object,\r\n\r\n    // ACTIONS FOR DISPATCH\r\n    startAgain: PropTypes.func.isRequired,\r\n    undoLastMove: PropTypes.func.isRequired,\r\n    autoSelectMove: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n    // Import props into this component from the store\r\n    ({ won, previousState, gameMode }) => ({\r\n        won, previousState, gameMode\r\n    }),\r\n\r\n    // Import Actions into Component\r\n    (dispatch) => {\r\n        return {\r\n            startAgain() {\r\n                dispatch(startNewGameAction());\r\n            },\r\n            undoLastMove() {\r\n                dispatch(undoLastMove());\r\n            },\r\n            autoSelectMove() {\r\n                dispatch(autoSelectMove())\r\n            }\r\n        };\r\n    }\r\n)(ButtonBar);\r\n\r\nexport { ButtonBar as PureButtonBar };","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ScoreBoard from './ScoreBoard';\r\nimport Board from \"./Board\";\r\nimport ButtonBar from './ButtonBar';\r\n\r\nclass Game extends Component {\r\n\r\n    render() {\r\n        return <div className=\"captureGame\" align=\"center\">          \r\n            <ScoreBoard/>\r\n            <Board/>\r\n            <ButtonBar/>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default connect()(Game);","import { playerOne, playerTwo } from '../players/players';\r\nimport {SINGLE_PLAYER, TWO_PLAYER} from  '../GameMode/GameMode';\r\nimport * as _ from 'lodash';\r\nimport { MOVE_PLAYER, START_NEW_GAME, UNDO_LAST_MOVE, AUTO_SELECT_MOVE, SWITCH_GAME_MODE } from '../actions/actionTypes';\r\nconst gameLogic = require('../GameLogic/GameLogic');\r\n\r\n\r\nexport const initialState = {\r\n    board: {\r\n        0: [0, 0, 0, 0, 0, 0],\r\n        1: [0, 0, 0, 0, 0, 0],\r\n        2: [0, 0, 0, 0, 0, 0],\r\n        3: [0, 0, 0, 0, 0, 0],\r\n        4: [0, 0, 0, 0, 0, 0],\r\n        5: [0, 0, 0, 0, 0, 0],\r\n    },\r\n\r\n    turn: playerOne,\r\n    won: undefined,\r\n    playerOnePosition: undefined,\r\n    playerTwoPosition: undefined,\r\n    previousState: undefined,\r\n\r\n    playerOneScore: 0,\r\n    playerTwoScore: 0,\r\n    gameMode: SINGLE_PLAYER\r\n};\r\n\r\nexport const captureReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case MOVE_PLAYER:\r\n            if (state.won !== undefined) {\r\n                return state;\r\n            }\r\n            const newState = _.cloneDeep(state);\r\n\r\n            // find the previous position of the player\r\n            const playerPos = action.player === playerOne ? state.playerOnePosition : state.playerTwoPosition;\r\n\r\n            if (playerPos === undefined) {\r\n                gameLogic.setPlayer(newState.board, action.player, action.row, action.col);\r\n\r\n                // set Previous positions\r\n                    newState.playerOnePosition = action.player === playerOne ? { row: parseInt(action.row), col: action.col } : newState.playerOnePosition;\r\n                    newState.playerTwoPosition = action.player === playerTwo ? { row: parseInt(action.row), col: action.col } : newState.playerTwoPosition;\r\n                // if PlayerOne is already set\r\n                if (newState.playerOnePosition !== undefined && newState.playerTwoPosition !== undefined) {\r\n                    // and player two made a bad move.\r\n                    if (gameLogic.hasPlayerWithTurnWonByKill(newState.board, playerOne, newState.playerOnePosition, newState.playerTwoPosition)) {\r\n                        newState.won = newState.turn;\r\n                    }\r\n                }\r\n\r\n                //Change player Turn\r\n                newState.turn = newState.turn === playerOne ? playerTwo : playerOne;\r\n            }\r\n            else {\r\n                if (gameLogic.isLegalMove(newState.board, playerPos, action)) {\r\n\r\n                    gameLogic.movePlayer(newState.board, action.player, playerPos.row, playerPos.col, action.row, action.col);\r\n\r\n                    // set Previous positions\r\n                        newState.playerOnePosition = action.player === playerOne ? { row: parseInt(action.row), col: action.col } : newState.playerOnePosition;\r\n                        newState.playerTwoPosition = action.player === playerTwo ? { row: parseInt(action.row), col: action.col } : newState.playerTwoPosition;\r\n                    //Change player Turn\r\n                    newState.turn = newState.turn === playerOne ? playerTwo : playerOne;\r\n\r\n                    // Check if Player With Turn Ends Game\r\n                    if (gameLogic.hasPlayerWithTurnWonByKill(newState.board, newState.turn, newState.playerOnePosition, newState.playerTwoPosition)) {\r\n                        newState.won = newState.turn;\r\n                    }\r\n\r\n                    let playerPosition = newState.turn === playerOne ? newState.playerOnePosition : newState.playerTwoPosition;\r\n                    if (gameLogic.hasPlayerWithTurnLostByNoMoves(newState.board, playerPosition))\r\n                    {\r\n                        newState.won = newState.turn === playerOne ? playerTwo : playerOne;\r\n                    }\r\n                }\r\n                else{\r\n                    return state;\r\n                }\r\n            }\r\n\r\n            if(newState.won === playerOne)\r\n            {\r\n                newState.playerOneScore++;\r\n            }\r\n            else if(newState.won === playerTwo) \r\n            {\r\n                newState.playerTwoScore++;\r\n            }\r\n\r\n            newState.previousState = state;\r\n\r\n            return newState;\r\n\r\n        case AUTO_SELECT_MOVE:\r\n            let newAction = {};\r\n            let bestMove = {};\r\n            let previous = state.previousState === undefined ? state.board : state.previousState.board;\r\n\r\n            // User Wants first move auto selected.\r\n            if (state.playerTwoPosition === undefined) {\r\n                bestMove = gameLogic.FirstTurnBestMove(state);\r\n            }\r\n            else {\r\n                bestMove = gameLogic.Minimax(state.board, previous, state.turn);\r\n            }\r\n\r\n            newAction = { type: MOVE_PLAYER, player: state.turn, row: bestMove.row, col: bestMove.col};\r\n            return captureReducer(state, newAction);\r\n\r\n        case SWITCH_GAME_MODE:\r\n            const resetState = _.cloneDeep(initialState);\r\n            resetState.gameMode = state.gameMode === SINGLE_PLAYER ? TWO_PLAYER : SINGLE_PLAYER;\r\n            return resetState;\r\n        case START_NEW_GAME:\r\n            const newGameState = _.cloneDeep(initialState);\r\n            newGameState.playerOneScore = state.playerOneScore;\r\n            newGameState.playerTwoScore = state.playerTwoScore;\r\n            newGameState.gameMode = state.gameMode;\r\n            return newGameState;\r\n        case UNDO_LAST_MOVE:\r\n            if(state.gameMode === SINGLE_PLAYER && state.turn === playerOne)\r\n            {\r\n                return state.previousState.previousState;\r\n            }\r\n            return state.previousState;\r\n        default:\r\n            return state;\r\n\r\n    }\r\n\r\n}","import React from 'react';\nimport Game from './components/Game';\nimport styled from 'styled-components';\nimport './App.css';\n\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport { initialState, captureReducer } from './reducers/captureReducer';\n\n\nconst store = createStore(captureReducer, initialState);\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Game />\n    </Provider>\n  );\n}\n\nexport default styled(App)`\n  font-family: Courier New, Courier, monospace;\n  margin: 0 auto;\n  width: 200px;\n`;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n      <App />,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}